<?php

namespace App\Http\Controllers;

use App\CentralLogics\Helpers;
use App\CentralLogics\OrderLogic;
use Brian2694\Toastr\Facades\Toastr;
use App\Models\Order;
use Illuminate\Http\Request;

class PaymobController extends Controller
{
    protected function cURL($url, $json)
    {
        // Create curl resource
        $ch = curl_init($url);

        // Request headers
        $headers = array();
        $headers[] = 'Content-Type: application/json';


        // Return the transfer as a string
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($json));
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        // $output contains the output string
        $output = curl_exec($ch);

        // Close curl resource to free up system resources
        curl_close($ch);
        return json_decode($output);
    }
    protected function capture($url, $json, $token)
    {
        // Create curl resource
        $ch = curl_init($url);

        // Request headers
        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$token;


        // Return the transfer as a string
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($json));
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        // $output contains the output string
        $output = curl_exec($ch);

        // Close curl resource to free up system resources
        curl_close($ch);
        return json_decode($output);
    }

    protected function GETcURL($url)
    {
        // Create curl resource
        $ch = curl_init($url);

        // Request headers
        $headers = array();
        $headers[] = 'Content-Type: application/json';

        // Return the transfer as a string
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        // $output contains the output string
        $output = curl_exec($ch);

        // Close curl resource to free up system resources
        curl_close($ch);
        return json_decode($output);
    }

    public function credit(Request $request)
    {
        // $transaction_id= "96729234";
        // $data=[
        //     "auth_token"=> "ZXlKaGJHY2lPaUpJVXpVeE1pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmpiR0Z6Y3lJNklrMWxjbU5vWVc1MElpd2ljSEp2Wm1sc1pWOXdheUk2TVRZM01EQTJMQ0p3YUdGemFDSTZJbU5rWTJObE5tUXlZekptTVdFeE1XTXhNVFUwWW1RMFlUTmpNalJrWVdJeFlXUmlaR1V5WXpjNVptTm1aak0yWlRFM1ltRTVOVFExTVdFNU1qTmhOMkVpTENKbGVIQWlPakUyT0RBMk56TXpNRGw5LnZReEVMUnkzU0ZLSmlHcm5yWllBZW5NQzB2Wlota3p0di0zYjh1TUZucURiRkRlcFp5QW42VGZkdWtCRS1pYnlEM09OdURiWWJlUm03eWI2bDJORFln",
        //     "transaction_id"=> "96918869",
        //     "amount_cents"=> 22754
        // ];
        //            // 'https://accept.paymob.com/api/acceptance/transactions/'.$transaction_id,
        //        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        //     // $ch = curl_init();

        //     // curl_setopt($ch, CURLOPT_URL, 'https://accept.paymob.com/api/acceptance/transactions/'.$transaction_id);
        //     // curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        //     // curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


        //     // $headers = array();
        //     // $headers[] = 'Accept: application/json';
        //     // $headers[] = 'Authorization: Bearer '.$token;
        //     // curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        //     // $result = curl_exec($ch);
        //     // curl_close($ch);
        //     // dd(json_decode($result,true));

        // $response = $this->cURL(
        //    'https://accept.paymob.com/api/acceptance/capture',
        //     $data
        // );
        $order_id=$request->order_id;
        info($order_id);
        $currency_code = "EGP";
        if ($currency_code != "EGP") {
            Toastr::error(translate('messages.paymob_supports_EGP_currency'));
            return back();
        }
        $config = Helpers::get_business_settings('paymob_accept');
        try {
            $token = $this->getToken();
            $order = $this->createOrder($token,$order_id);
            $paymentToken = $this->getPaymentToken($order, $token,$order_id);
        }catch (\Exception $exception){
            Toastr::error(translate('messages.country_permission_denied_or_misconfiguration'));
            return back();
        }
        return \Redirect::away('https://accept.paymobsolutions.com/api/acceptance/iframes/' . $config['iframe_id'] . '?payment_token=' . $paymentToken);
    }

    public function getToken()
    {
        $config = Helpers::get_business_settings('paymob_accept');
        $response = $this->cURL(
            'https://accept.paymob.com/api/auth/tokens',
            ['api_key' => $config['api_key']]
        );
        return $response->token;
    }

    public function createOrder($token,$order_id)
    {
        $order = Order::with(['details'])->where('id',$order_id)->first();

         $item = [];
        // foreach ($order->details as $detail) {
        //     array_push($items, [
        //         'name' => $detail->campaign?$detail->campaign->title:$detail->food['name'],
        //         'amount_cents' => round($detail['price'],2) * 100,
        //         'description' => $detail->campaign?$detail->campaign->title:$detail->food['name'],
        //         'quantity' => $detail['quantity']
        //     ]);
        // }
        $item['description'] = $order->id;
        $length = random_bytes(5);
        $merchant_order_id = bin2hex($length).'-'.$order->id;
        $data = [
            "auth_token" => $token,
            "delivery_needed" => "false",
            "amount_cents" => round($order->order_amount * 100),
            "merchant_order_id" => $merchant_order_id,
            "currency" => "EGP",
            "item" => $item,

        ];
        $order->transaction_reference= $merchant_order_id;
        $order->save();
        $response = $this->cURL(
            'https://accept.paymob.com/api/ecommerce/orders',
            $data
        );

        return $response;
    }

    public function getPaymentToken($order, $token,$order_id)
    {
        $ord = Order::with(['details'])->where('id', $order_id)->first();

        $value = $ord->order_amount;
        $config = Helpers::get_business_settings('paymob_accept');
        $billingData = [
            "apartment" => "NA",
            "email" => isset($ord->customer) ? $ord->customer->email:'natalia@gmail.com',
            "floor" => "NA",
            "first_name" => isset($ord->customer) ? $ord->customer->f_name:'natalia',
            "street" => "NA",
            "building" => "NA",
            "phone_number" => isset($ord->customer) ? $ord->customer->phone:'01700000000',
            "shipping_method" => "PKG",
            "postal_code" => "NA",
            "city" => "NA",
            "country" => "NA",
            "last_name" => isset($ord->customer) ? $ord->customer->l_name:'natalia',
            "state" => "NA",
        ];
        $data = [
            "auth_token" => $token,
            "amount_cents" => round($value * 100),
            "expiration" => 3600,
            "order_id" => $order->id,
            "billing_data" => $billingData,
            "currency" => "EGP",
            "integration_id" => $config['integration_id']
        ];

        $response = $this->cURL(
            'https://accept.paymob.com/api/acceptance/payment_keys',
            $data
        );

        return $response->token;
    }

    public function callback(Request $request)
    {
        $config = Helpers::get_business_settings('paymob_accept');
        $data = $request->all();
        ksort($data);
        $hmac = $data['hmac'];
        $array = [
            'amount_cents',
            'created_at',
            'currency',
            'error_occured',
            'has_parent_transaction',
            'id',
            'integration_id',
            'is_3d_secure',
            'is_auth',
            'is_capture',
            'is_refunded',
            'is_standalone_payment',
            'is_voided',
            'order',
            'owner',
            'pending',
            'source_data_pan',
            'source_data_sub_type',
            'source_data_type',
            'success',
        ];
        $connectedString = '';
        foreach ($data as $key => $element) {
            if (in_array($key, $array)) {
                $connectedString .= $element;
            }
        }
        $secret = $config['hmac'];
        $hased = hash_hmac('sha512', $connectedString, $secret);
        $order = Order::where('transaction_reference', $request['merchant_order_id'])->first();

        if($order){
            if ($hased == $hmac && $request['success'] == "true") {
                $order->transaction_reference = $request['id'];
                $order->payment_method = 'paymob_accept';
                $order->payment_status = 'paid';
                $order->order_status = 'confirmed';
                $order->confirmed = now();
                $order->updated_at = now();
                $order->save();
                try {
                    Helpers::send_order_notification($order);
                } catch (\Exception $e) {
                }

                if ($order->callback != null) {
                    return redirect($order->callback . '&status=success');
                }else{
                    return \redirect()->route('payment-success');
                }
            }

            $order->order_status = 'failed';
            $order->failed = now();
            $order->save();
            if ($order->callback != null) {
                return redirect($order->callback . '&status=fail');
            }else{
                return \redirect()->route('payment-fail');
            }
        }else{
            return \redirect()->route('payment-fail');
        }
    }
}